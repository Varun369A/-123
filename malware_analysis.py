import sys
import os
import hashlib
import platform
import subprocess
import pefile
import requests
import json
from PyQt5.QtWidgets import (
    QApplication, QWidget, QPushButton, QVBoxLayout, QLabel, QFileDialog,
    QProgressBar, QTextEdit, QMessageBox
)
from PyQt5.QtCore import Qt, QThread, pyqtSignal
from datetime import datetime
from math import log2

LOG_FILE = "malware_analysis_log.txt"

class BackgroundTask(QThread):
    progress = pyqtSignal(int)
    result = pyqtSignal(str)
    error = pyqtSignal(str)

    def __init__(self, func, *args):
        super().__init__()
        self.func = func
        self.args = args

    def run(self):
        try:
            for progress, result in self.func(*self.args):
                self.progress.emit(progress)
                self.result.emit(result)
        except Exception as e:
            self.error.emit(str(e))

class MalwareAnalysisTool(QWidget):
    def __init__(self):
        super().__init__()
        self.setWindowTitle("Advanced Malware Analysis Tool")
        self.setGeometry(100, 100, 900, 700)
        self.init_ui()

    def init_ui(self):
        self.layout = QVBoxLayout()

        # Set up background and styling colors
        self.setStyleSheet("""
            QWidget {
                background-color: #F0F8FF;
            }
            QLabel {
                font-size: 18px;
                color: #4CAF50;
                font-weight: bold;
            }
            QPushButton {
                background-color: #008CBA;
                color: white;
                padding: 10px;
                font-size: 14px;
                border-radius: 5px;
            }
            QPushButton:hover {
                background-color: #006F8E;
            }
            QProgressBar {
                background-color: #E0E0E0;
                border-radius: 5px;
                height: 20px;
            }
            QProgressBar::chunk {
                background-color: #4CAF50;
            }
            QTextEdit {
                background-color: #FFFFFF;
                border: 1px solid #008CBA;
                font-size: 14px;
            }
        """)

        self.label = QLabel("Welcome to the Advanced Malware Analysis Tool", self)
        self.label.setAlignment(Qt.AlignCenter)
        self.layout.addWidget(self.label)

        self.file_button = QPushButton("Select File for Analysis", self)
        self.file_button.clicked.connect(self.select_file)
        self.layout.addWidget(self.file_button)

        self.hash_button = QPushButton("Generate Hashes", self)
        self.hash_button.clicked.connect(self.generate_hashes)
        self.layout.addWidget(self.hash_button)

        self.pe_analysis_button = QPushButton("PE Header Analysis", self)
        self.pe_analysis_button.clicked.connect(self.analyze_pe_header)
        self.layout.addWidget(self.pe_analysis_button)

        self.entropy_button = QPushButton("Entropy Analysis", self)
        self.entropy_button.clicked.connect(self.entropy_analysis)
        self.layout.addWidget(self.entropy_button)

        self.virustotal_button = QPushButton("Check on VirusTotal", self)
        self.virustotal_button.clicked.connect(self.check_virustotal)
        self.layout.addWidget(self.virustotal_button)

        self.dynamic_analysis_button = QPushButton("Run Dynamic Analysis (Linux Sandbox)", self)
        self.dynamic_analysis_button.clicked.connect(self.run_dynamic_analysis)
        self.layout.addWidget(self.dynamic_analysis_button)

        self.download_report_button = QPushButton("Download Report", self)
        self.download_report_button.clicked.connect(self.download_report)
        self.layout.addWidget(self.download_report_button)

        self.clear_button = QPushButton("Clear", self)
        self.clear_button.clicked.connect(self.clear_ui)
        self.layout.addWidget(self.clear_button)

        self.progress_bar = QProgressBar(self)
        self.layout.addWidget(self.progress_bar)

        self.result_display = QTextEdit(self)
        self.result_display.setReadOnly(True)
        self.layout.addWidget(self.result_display)

        self.setLayout(self.layout)

    def select_file(self):
        file_path, _ = QFileDialog.getOpenFileName(self, "Select File")
        if file_path:
            self.label.setText(f"Selected File: {file_path}")
            self.file_path = file_path

    def generate_hashes(self):
        if not hasattr(self, 'file_path'):
            self.show_error("No file selected. Please select a file first.")
            return

        def hash_task(file_path):
            file_content = open(file_path, "rb").read()
            yield 50, f"MD5: {hashlib.md5(file_content).hexdigest()}"
            yield 75, f"SHA-1: {hashlib.sha1(file_content).hexdigest()}"
            yield 100, f"SHA-256: {hashlib.sha256(file_content).hexdigest()}"

        self.run_task(hash_task, self.file_path)

    def analyze_pe_header(self):
        if not hasattr(self, 'file_path'):
            self.show_error("No file selected. Please select a file first.")
            return

        def pe_task(file_path):
            pe = pefile.PE(file_path)
            yield 50, f"Entry Point: {hex(pe.OPTIONAL_HEADER.AddressOfEntryPoint)}"
            yield 75, f"Sections: {[section.Name.decode().strip() for section in pe.sections]} "
            yield 100, f"Imports: {[entry.dll.decode() for entry in pe.DIRECTORY_ENTRY_IMPORT]}" 

        self.run_task(pe_task, self.file_path)

    def entropy_analysis(self):
        if not hasattr(self, 'file_path'):
            self.show_error("No file selected. Please select a file first.")
            return

        def entropy_task(file_path):
            with open(file_path, 'rb') as f:
                data = f.read()
            freq = {byte: data.count(byte) for byte in set(data)}
            entropy = -sum(
                (count / len(data)) * log2(count / len(data))
                for count in freq.values()
            )
            yield 100, f"Entropy: {entropy:.4f}"

        self.run_task(entropy_task, self.file_path)

    def check_virustotal(self):
        if not hasattr(self, 'file_path'):
            self.show_error("No file selected. Please select a file first.")
            return

        def vt_task(file_path):
            file_hash = hashlib.sha256(open(file_path, "rb").read()).hexdigest()
            
            # VirusTotal API key and URL
            api_key = "YOUR_API_KEY"  # Replace with your VirusTotal API Key
            url = f"https://www.virustotal.com/api/v3/files/{file_hash}"

            headers = {
                "x-apikey": api_key
            }

            try:
                # Send a GET request to VirusTotal API to check the file's hash
                response = requests.get(url, headers=headers)
                if response.status_code == 200:
                    result_data = response.json()

                    # Extract the scan results
                    malicious = 0
                    total = 0
                    for scanner, scan_result in result_data["data"]["attributes"]["last_analysis_results"].items():
                        total += 1
                        if scan_result["category"] == "malicious":
                            malicious += 1

                    if malicious > 0:
                        yield 100, f"Malware detected: {malicious}/{total} scanners flagged the file as malicious."
                    else:
                        yield 100, f"No malware detected: {malicious}/{total} scanners flagged the file as malicious."

                else:
                    yield 100, f"Error: Could not retrieve VirusTotal data (API response code: {response.status_code})"

            except requests.exceptions.RequestException as e:
                yield 100, f"Error connecting to VirusTotal: {str(e)}"

        self.run_task(vt_task, self.file_path)

    def run_dynamic_analysis(self):
        if platform.system() != "Linux":
            self.show_error("Dynamic analysis is only supported on Linux.")
            return
        if not hasattr(self, 'file_path'):
            self.show_error("No file selected. Please select a file first.")
            return

        def dynamic_task(file_path):
            result = subprocess.run(
                ["firejail", file_path],
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE,
                text=True
            )
            yield 100, f"Sandbox Output:\n{result.stdout}\nErrors:\n{result.stderr}"

        self.run_task(dynamic_task, self.file_path)

    def run_task(self, task_func, *args):
        self.progress_bar.setValue(0)
        self.task_thread = BackgroundTask(task_func, *args)
        self.task_thread.progress.connect(self.progress_bar.setValue)
        self.task_thread.result.connect(self.log_result)
        self.task_thread.error.connect(self.show_error)
        self.task_thread.start()

    def download_report(self):
        if not hasattr(self, 'file_path'):
            self.show_error("No file selected. Please select a file first.")
            return

        save_path, _ = QFileDialog.getSaveFileName(self, "Save Report", "", "Text Files (*.txt)")
        if save_path:
            try:
                with open(save_path, "w") as file:
                    file.write(self.result_display.toPlainText())
                self.show_message("Report saved successfully!")
            except Exception as e:
                self.show_error(f"Error saving report: {e}")

    def clear_ui(self):
        self.label.setText("Welcome to the Advanced Malware Analysis Tool")
        self.progress_bar.setValue(0)
        self.result_display.clear()
        if hasattr(self, 'file_path'):
            del self.file_path

    def log_result(self, result):
        self.result_display.append(result)
        with open(LOG_FILE, "a") as log_file:
            log_file.write(f"{datetime.now()} - {result}\n")

    def show_error(self, message):
        QMessageBox.critical(self, "Error", message)

    def show_message(self, message):
        QMessageBox.information(self, "Info", message)

if __name__ == "__main__":
    app = QApplication(sys.argv)
    window = MalwareAnalysisTool()
    window.show()
    sys.exit(app.exec_())
